#!/usr/bin/env python3
import sys
from google import genai
from google.genai import types
from jira import JIRA
from typing import List, Dict, Any
import re
import time
import json
from termcolor import colored

# Configuration - Load environment variables
GEMINI_API_KEY = "AIzaSyDOOD4KP69UDxqr_-BCYDMqRbCWAhqfP0Y" #You can change the model API from here
JIRA_URL = "https://[your-company-name].atlassian.net"
JIRA_USER = "User-Email"
JIRA_TOKEN = "Jira-Token-From-User_account"
JIRA_PROJECT = "The-Shortent-Name-Of-The-Project"

# Validate configuration
if not GEMINI_API_KEY:
    print(colored("ERROR: GEMINI_API_KEY environment variable not set",'red'))
    sys.exit(1)

if not all([JIRA_URL, JIRA_USER, JIRA_TOKEN, JIRA_PROJECT]):
    print(colored("ERROR: Missing Jira configuration. Please set:",'red'))
    print(colored("JIRA_URL, JIRA_USER, JIRA_TOKEN, JIRA_PROJECT",'red'))
    sys.exit(1)

client = genai.Client(api_key=GEMINI_API_KEY)

class Vulnerability:
    def __init__(self, description: str, severity: str = None):
        self.description = description
        self.severity = severity

    def __str__(self):
        return f"{self.description} [{self.severity.upper()}]"


def get_user_input() -> List[str]:
    """Collect multi-line input from user until empty line is entered"""
    print(colored("\nEnter vulnerabilities (one per line). Press Enter twice to finish:",'cyan'))
    vulnerabilities = []
    pattern = re.compile(r'^\d+\.\s*')
    #while True:
    try:
        line = sys.stdin.read()
        vulnerabilities = []
        for lines in line.splitlines():
            cleaned_line = pattern.sub('', lines.strip())
            vulnerabilities.append(cleaned_line)
    except KeyboardInterrupt:
        print(colored("\nOperation cancelled by user",'yellow',attrs=['blink']))
        sys.exit(0)


    flattened = []
    for item in vulnerabilities:
        lines = item.split('\n')  # Not strictly necessary anymore, but safe
        cleaned_lines = [line.strip() for line in lines if line.strip()]
        flattened.extend(cleaned_lines)

    return flattened

def classify_vulnerability(description: str) -> str | None | Any:
    """Classify a single vulnerability using Gemini AI"""
    prompt = (
        "Classify this security vulnerability as exactly one of: low, medium, or critical.\n"
        "Create brief description with no more than two lines for each vulnerability"
        "Only respond with json format like this: {'Classification': '', 'Description': ''}.\n"
        "Vulnerability:\n"
        f"{description}"
    )


    try:
        #response = model.generate_content(prompt)
        response = client.models.generate_content(
            model="gemini-2.0-flash",  #You can change the model name from here
            contents=prompt,
            config=types.GenerateContentConfig(
                system_instruction=prompt,
                max_output_tokens=20000,
                temperature=0
            )
        )
        json_response=extract_json(response.text)
        severity=json_response["Classification"]
        time.sleep(5)

        # Validate and normalize response
        if severity not in ['low', 'medium', 'critical']:
            print(colored(f"Warning: AI returned unexpected classification '{severity}'. Defaulting to 'medium'",'yellow'))
            return None
        return json_response
    except Exception as e:
        print(colored(f"Error classifying vulnerability: {e}",'red'))
        return None  # Default on error

def extract_json(llm_response: str):
    match = re.search(r'```json\n(.*?)\n```', llm_response, re.DOTALL)
    if match:
        json_str = match.group(1).strip()
        return json.loads(json_str)
    return llm_response

def classify_all_vulnerabilities(vulnerabilities: List[str]) -> list[dict[str, str]]:
    """Classify all vulnerabilities with progress feedback"""
    print(colored("\nClassifying vulnerabilities...",'green'))
    results = []
    for i, vuln in enumerate(vulnerabilities, 1):
        print(f"Processing {i}/{len(vulnerabilities)}...", end='\r')
        severity = classify_vulnerability(vuln)


        if severity is not None:
            results.append({
                'vulnerability': vuln,
                'classification': severity["Classification"],
                'description': severity["Description"]
            })
    print(colored("\nClassification complete!",'green',attrs=['bold']))
    return results

#Comment this if you don't want to see too much details
def display_results(vulnerabilities: List[Vulnerability]):
    """Display classification results to user"""
    print(colored("\nClassification Results:",'green',attrs=['bold']))
    for i, vuln in enumerate(vulnerabilities, 1):
        print(f"{i}. {vuln}")


def create_jira_tickets(vulnerabilities: List[Dict[str, str]]) -> List[str]:
    print(colored("\nConnecting to Jira...",'yellow'))
    try:
        jira = JIRA(
            server=JIRA_URL,
            basic_auth=(JIRA_USER, JIRA_TOKEN),
            options={'timeout': 30}  # Increased timeout
        )

        try:
            #______________________________________
            #This is for future use
            #______________________________________
            project = jira.project(JIRA_PROJECT)
            #print(f"Project roles: {jira.project_roles(project)}")
        except Exception as e:
            print(colored(f"Project access error: {e}",'red'))
            return []

    except Exception as e:
        print(colored(f"Jira connection failed: {str(e)}",'red'))
        if "AUTHENTICATED_FAILED" in str(e):
            print("ERROR: Invalid credentials or insufficient permissions")
        return []

    print(colored(f"Creating tickets in project {JIRA_PROJECT}...",'magenta'))
    created_issues = []
    priority_map = {
        'low': 'Low',
        'medium': 'Medium',
        'critical': 'Highest'
    }



    for vuln in vulnerabilities:
        try:
            issue_type = 'Vulnerability'

            issue_dict = {
                'project': {'key': JIRA_PROJECT},
                'summary': vuln["vulnerability"][:100].capitalize(),
                'description': f"""**This is a brief description of this vulnerability:**
                                \n{vuln['description']}
                                \n**Classification**: {vuln['classification'].upper()}""",
                'issuetype': {'name': 'Vulnerability'},
                'priority': {'name': priority_map.get(vuln['classification'], 'Medium')},
                'labels': ['security', issue_type],
                # 'update': {
                #     'backlog': [{
                #         'add': 'true'  # Sprint ID (get this from Jira URL) here I am using backlog
                #     }]
                # }}
                # Add other custom fields as needed
                # 'customfield_12345': 'Security Team'
            }
            

            issue = jira.create_issue(fields=issue_dict)
            created_issues.append(issue.key)
            print(colored(f"  Created {issue.key} - {vuln['classification'].upper()} ({issue_type})",'green'))
        except Exception as e:
            print(colored(f"Failed to create issue for: {vuln['description']}\nError: {e}",'red'))

    return created_issues


def confirm_jira_creation() -> bool:
    """Ask user to confirm Jira ticket creation"""
    while True:
        choice = input("\nCreate Jira tickets for these vulnerabilities? (Y/N): ").strip().lower()
        if choice in ['y', 'yes']:
            return True
        elif choice in ['n', 'no']:
            return False
        print("Please enter Y or N")


def main():
    print(colored("=== Vulnerability Classification and Jira Creation Tool ===",'cyan'))
    print(colored("This tool will:",'cyan'))
    print(colored("1. Accept vulnerability descriptions (multi-line input)",'cyan'))
    print(colored("2. Classify each as Low, Medium, or Critical using AI",'cyan'))
    print(colored("3. Optionally create Jira tickets for each vulnerability",'cyan'))

    #Get vulnerabilities from user
    vulnerabilities = get_user_input()

    #Classify vulnerabilities
    classified_vulns = classify_all_vulnerabilities(vulnerabilities)

    #Create Jira tickets
    if confirm_jira_creation():
        created_issues = create_jira_tickets(classified_vulns)
        if created_issues:
            print(colored(f"\nSuccessfully created {len(created_issues)} Jira tickets:",'green'))
            for issue in created_issues:
                print(colored(f"- {JIRA_URL}/browse/{issue}",'white'))
        else:
            print(colored("\nNo tickets were created.",'red'))
    else:
        print(colored("\nOperation cancelled - no tickets created.",'yellow',attrs=['blink']))

    print("\nTool execution complete.")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(colored("\n\nOperation cancelled by user",'yellow',attrs=['blink']))
        sys.exit(0)
    except Exception as e:
        print(colored(f"\nAn unexpected error occurred: {e}",'red'))
        sys.exit(1)